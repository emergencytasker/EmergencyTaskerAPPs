@page "/password_recovery"
@using Blazored.Toast.Services;
@using ETClient.API.ER;
@using ETClient.Localization;
@using ETClient.Models;
@using ETClient.Pages.Dialogs;
@using ETClient.Services;
@using ETClient;
@using Microsoft.Extensions.Localization;
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject SesionService sesionService
@inject IStringLocalizer<SharedResource> Loc

@if (isLoaded)
{
    <div class="container container-center">

        <div>
            <img class="img-logo" src="/media/eticon.png" />
        </div>

        <div>
            <p class="sub-title">@Loc["RecuperaContraseña"]</p>
        </div>

        <div id="bg"></div>

        <form class="form-login" method="dialog">
            <div class="container" style="margin-top:5px;">
                <label>@Loc["MensajeCorreo"]</label>
            </div>
            <hr>
            <div class="form-field">
                <input type="email" placeholder="@Loc["Email"]" autocomplete="on" required @bind-value="email" />
            </div>

            <div class="form-field">
                <button class="btn" @onclick="onRecovery" type="submit">@Loc["Aceptar"]</button>
            </div>
        </form>
    </div>

    <RecoveryCodeDialog @ref="@recoveryDialog"/>
    <ProcessDialog @ref="@processDialog" />
}

@code {

    [Inject] IToastService? toastService { set; get; }
    private bool loggedIn;
    string? email, password;
    bool isLoaded;
    SesionModel sesion { set; get; } = new();
    ProcessDialog? processDialog;
    RecoveryCodeDialog? recoveryDialog;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isLoaded)
        {
            isLoaded = true;
            sesion = await sesionService.Read(sessionStorage);

            if (sesion.Authenticated)
            {
                navigationManager.NavigateTo("/", true);
                return;
            }

            this.StateHasChanged();
        }
    }

    async void onRecovery()
    {
        processDialog.Show();

        if (string.IsNullOrEmpty(email))
        {
            toastService.ShowError(Loc["IngresaCorreo"]);
            processDialog.Close();
            return;
        }

        var user = (await Client.User.Where(new User
            {
                email = email
            })).FirstOrDefault();

        if (user == null)
        {
            toastService.ShowError(Loc["RevisaEmail"]);
            processDialog.Close();
            return;
        }

        var code = (new Random().Next(10000, 99999)).ToString();
        var send = await Client.SendMail(email, Loc["CodigoRecuperacion"], string.Format(Loc["EsteCodigo"], user.nombre, code));
        if (!send)
        {
            toastService.ShowError(Loc["SinContinuar"]);
            processDialog.Close();
            return;
        }

        recoveryDialog.OnReturn = OnRecoveryReturn;
        recoveryDialog.Show(code, user.id);

        processDialog.Close();
    }

    async void OnRecoveryReturn(object sender, object e)
    {
        if (recoveryDialog.code == e.ToString())
        {

            if (recoveryDialog.isPasswordConfirm)
            {
                processDialog.Show();

                var status = await Client.UpdatePassword(recoveryDialog.userID, recoveryDialog.passwordString);

                if (!status)
                {
                    toastService.ShowError(Loc["PasswordNoActualizado"]);
                    processDialog.Close();
                    return;
                }

                toastService.ShowSuccess(Loc["DatosActualizados"]);
                recoveryDialog.Close();
                processDialog.Close();
                navigationManager.NavigateTo("/login");
            }
            else
            {
                recoveryDialog.PasswordContinue();
            }
        }
        else
        {
            recoveryDialog.CodeClear();
            toastService.ShowError(Loc["CodigosNoCoinciden"]);
        }
      
    }
}
