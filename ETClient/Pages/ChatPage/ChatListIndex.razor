@page "/chat"
@using AKSoftware.Blazor.Utilities;
@using ETClient.API.ER;
@using ETClient.Helpers;
@using Plugin.Net.Socket;
@using System.Collections.ObjectModel;
@using System.ComponentModel;

@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject SesionService sesionService

@if (!isLoaded)
{
    <WaitDialog />
}
else if (sesion.Authenticated)
{

        <div class="container">
        @if (Chats.Count == 0)
        {
                    <div class="content-center">
                        <p style="color:gray">You don't have messages yet</p>
                    </div>

        }
        else
        {
            @foreach (var item in Chats)
            {
               <a class="margin-5" href="/chat/@item.Trabajador">
                    <div class="container-chat margin-5 row">
                        <div style="width:100px">
                            <img class="avatar avatar-border" src="@($"{item.ImageUser}")" />
                        </div>
                        <div class="col">
                            <p><b>@item.NameUser</b></p>
                            <p style="color:gray">@item.Messenger</p>
                        </div>
                        <div class="col-2">

                            <div class="row">
                                <div class="chat-message-time">@item.LastUpdate</div>
                                @if (@item.IsPenddingVisible)
                                {
                                    <div class="chat-message-ballon">@item.PenddingMessage</div>
                                }
                            </div>
                      
                        </div>
                     </div>
               </a>
            }
        }

        </div>
           
}

@code {
    [Inject] IToastService? toastService { set; get; }
    private bool loggedIn;
    string? email, password;
    bool isLoaded;
    SesionModel sesion { set; get; } = new();
    public ObservableCollection<ChatModel> Chats { set; get; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isLoaded)
        {
            sesion = await sesionService.Read(sessionStorage);

            if (!sesion.Authenticated)
            {
                navigationManager.NavigateTo("/login", true);
                return;
            }

            var chats = await Client.Chat.Where(new Chat
                {
                    cliente = sesion.Perfil == API.Enum.Perfil.Client ? sesion.User.id : 0,
                    trabajador = sesion.Perfil == API.Enum.Perfil.Tasker ? sesion.User.id : 0
                }) ?? new List<Chat>(0);

            if (chats.Count() == 0)
            {
                isLoaded = true;
                this.StateHasChanged();
                return;
            }

            var usuarios = await GetUsers(chats);
            var models = await GetModels(usuarios);

            SetSource(models.OrderByDescending(m => m.Date));

            MessagingCenter.Subscribe<ChatListIndex, ChatMessage>(this, "Message", (sender, message) =>
              {
                  Console.WriteLine($"[Message] {message.Message}");
                  var chat = Chats?.FirstOrDefault(s => s.Trabajador == message.Trabajador && s.Cliente == message.Cliente);
                  if (chat == null) return;
                  chat.Messenger = message.Message;
                  chat.LastUpdate = message.Date.ToPrettyDate();
                  Chats.Remove(chat);
                  Chats.Insert(0, chat);
                  sender.StateHasChanged();
          });

            isLoaded = true;
            this.StateHasChanged();
        }
    }

    private void SetSource(IEnumerable<ChatModel> models)
    {
        if (models == null) Chats = new ObservableCollection<ChatModel>();
        else Chats = new ObservableCollection<ChatModel>(models);
    }

    private async Task<IEnumerable<ChatModel>> GetModels(IEnumerable<User> usuarios)
    {
        if (sesion.User == null) return null;
        List<ChatModel> models = new List<ChatModel>(usuarios.Count());

        foreach (var usuario in usuarios)
        {
            int idtrabajador;
            int idcliente;
            if (sesion.Perfil == API.Enum.Perfil.Client)
            {
                idcliente = sesion.User.id;
                idtrabajador = usuario.id;
            }
            else
            {
                idcliente = usuario.id;
                idtrabajador = sesion.User.id;
            }
            var channel = GetChannel(sesion, usuario);
            var model = await GetLastUpdate(channel);
            model = new ChatModel
                {
                    ImageUser = Client.GetPath(usuario.imagen),
                    LastUpdate = model?.LastUpdate ?? "",
                    NameUser = usuario.nombre,
                    Messenger = model?.Messenger ?? "",
                    PenddingMessage = model?.PenddingMessage ?? 0,
                    Cliente = idcliente,
                    Trabajador = idtrabajador
                };
            models.Add(model);
        }
        return models;
    }

    private async Task<ChatModel> GetLastUpdate(string channel)
    {
        if (sesion.User == null) return null;

        var date = await Client.GetDate();
        if (date == null)
        {
            toastService.ShowError("");
            return null;
        }
        var now = date.Value;

        var socket = await SocketFactory.Instance.Resolve();
        var message = (await socket.History(channel, 1)).FirstOrDefault();
        if (message == null) return null;
        if (!message.ContainsKey("message") || !message.ContainsKey("userid") || !message.ContainsKey("date")) return null;

        var messagedate = message["date"];
        var fecha = messagedate.FromMySqlDateTimeFormat();
        var userid = int.Parse(message["userid"]);

        int pending = 0;
        if (sesion.User.id != userid) pending++;

        string lastupdate;
        if (now.Day == fecha.Day && now.Month == fecha.Month)
        {
            lastupdate = fecha.ToShortTimeString();
        }
        else if ((now.Day - 1) == fecha.Day && now.Month == fecha.Month)
        {
            lastupdate = "right now";
        }
        else
        {
            lastupdate = fecha.ToLongDateString();
        }

            return new ChatModel
            {
                Messenger = message["message"],
                LastUpdate = lastupdate,
                PenddingMessage = pending,
                Date = messagedate
            };
    }


        private string GetChannel(SesionModel login, User user)
        {
            var channel = $"Chat-";
            if (login.Perfil == API.Enum.Perfil.Client)
            {
                channel += $"{login.User.id}-{user.id}";
            }
            else
            {
                channel += $"{user.id}-{login.User.id}";
            }
            return channel;
        }

    private async Task<IEnumerable<User>> GetUsers(IEnumerable<Chat> chats)
    {
        if (sesion.User == null) return new List<User>(0);
        if (chats == null) return new List<User>(0);

        var idusuarios = new List<int>(chats.Count());
        foreach (var item in chats)
        {
            if (sesion.Perfil == API.Enum.Perfil.Client)
            {
                idusuarios.Add(item.trabajador);
            }
            else if (sesion.Perfil == API.Enum.Perfil.Tasker)
            {
                idusuarios.Add(item.cliente);
            }
        }
        var ids = idusuarios.Distinct().Select(s => (object)s);
        return await Client.User.Get(ids) ?? new List<User>(0);
    }
}
